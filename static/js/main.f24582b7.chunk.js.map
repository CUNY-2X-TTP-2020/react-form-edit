{"version":3,"sources":["components/NameForm.js","App.js","serviceWorker.js","index.js"],"names":["NameForm","props","handleSubmit","event","preventDefault","setState","fname","target","value","lname","showInputs","changeView","state","undefined","this","onSubmit","type","name","id","placeholder","onClick","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAGqBA,E,kDAEjB,WAAYC,GACX,IAAD,8BACI,cAAMA,IASVC,aAAe,SAACC,GAGZA,EAAMC,iBAEN,EAAKC,SACL,CACIC,MAAOH,EAAMI,OAAOD,MAAME,MAC1BC,MAAON,EAAMI,OAAOE,MAAMD,MAC1BE,YAAY,KAnBpB,EAuBAC,WAAa,WAET,EAAKC,MAAMF,WAAa,EAAKL,SAAS,CAAEK,YAAY,IAAW,EAAKL,SAAS,CAAEK,YAAY,KAvB3F,EAAKE,MACL,CACIN,WAAuBO,IAAhBZ,EAAMK,MAAsBL,EAAMK,MAAQ,OACjDG,WAAuBI,IAAhBZ,EAAMQ,MAAsBR,EAAMQ,MAAQ,MACjDC,YAAY,GANpB,E,qDA8BI,OACI,6BAEII,KAAKF,MAAMF,WAEP,0BAAMK,SAAUD,KAAKZ,cACjB,2CACA,2BAAOc,KAAK,OAAOC,KAAK,QAAQC,GAAG,QAAQC,YAAaL,KAAKF,MAAMN,QACnE,6BAAK,6BAEL,0CACA,2BAAOU,KAAK,OAAOC,KAAK,QAAQC,GAAG,QAAQC,YAAaL,KAAKF,MAAMH,QACnE,6BAEA,4BAAQO,KAAK,UAAb,QACA,4BAAQI,QAASN,KAAKH,YAAtB,WAIJ,6BACI,4CAAkBG,KAAKF,MAAMN,OAC7B,2CAAiBQ,KAAKF,MAAMH,OAC5B,4BAAQW,QAASN,KAAKH,YAAtB,c,GAvDcU,a,MCavBC,MAZf,WAEI,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,yCACA,kBAAC,EAAD,CAAUjB,MAAM,SAASG,MAAM,YCE3Be,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f24582b7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class NameForm extends Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.state = \n        {\n            fname: props.fname !== undefined ? props.fname : \"John\",\n            lname: props.lname !== undefined ? props.lname : \"Doe\",\n            showInputs: false,\n        };\n    }\n\n    handleSubmit = (event) =>\n    {\n        // Prevent browser reload/refresh\n        event.preventDefault();\n\n        this.setState(\n        {\n            fname: event.target.fname.value,\n            lname: event.target.lname.value,\n            showInputs: false,\n        });\n    };\n\n    changeView = () =>\n    {\n        this.state.showInputs ? this.setState({ showInputs: false }) : this.setState({ showInputs: true });\n    };\n\n    render() \n    {\n        return (\n            <div>\n            {\n                this.state.showInputs ?\n                (\n                    <form onSubmit={this.handleSubmit}>\n                        <div>First Name</div>\n                        <input type=\"text\" name=\"fname\" id=\"fname\" placeholder={this.state.fname} />\n                        <br/><br/>\n\n                        <div>Last Name</div>\n                        <input type=\"text\" name=\"lname\" id=\"lname\" placeholder={this.state.lname} />\n                        <br/>\n                        \n                        <button type=\"submit\">Save</button> \n                        <button onClick={this.changeView}>Cancel</button>\n                    </form>\n                ):\n                (\n                    <div>\n                        <div>First Name: {this.state.fname}</div>\n                        <div>Last Name: {this.state.lname}</div>\n                        <button onClick={this.changeView}>Edit</button>\n                    </div>\n                )\n            }\n            </div>\n        );\n    }\n}\n\nNameForm.propTypes =\n{\n    fname: PropTypes.string,\n    lname: PropTypes.string\n}","import React from \"react\";\nimport NameForm from \"./components/NameForm\";\nimport \"./App.css\";\n\nfunction App()\n{\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Form Edit</h1>\n                <NameForm fname=\"Random\" lname=\"Dude\" />\n            </header>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}